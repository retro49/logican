// Basic proof of logical equivalences
theorem basis {
    // negation unary operator
    theorem negation {
        // negation is one of the unary logical operator
        // let "P" present a statement.
        statement P = ... is true ; // statement "P" evaluates to true
        // Then the negation of the statement "P" is written
        // mathematically ¬P, ~P, !P.
        // In logican it is written in the third form: !P.

        // proof that statement "P" is true, hence the keyword proof.
        proof P;
        // proof that the negation of statement "P' is false with equality test.
        proof !P == false;
        // let "Q" present the opposite of "P"
        statement Q = !P;

        // proof that the opposite of "Q" is "P".
        // P = true, Q = false.
        // therefore true == !false
        proof P == !Q;
        // Q = false, P = true
        // therefore false == !true
        proof Q == !P;
    }

    /// conjunction binary operator
    theorem conjunction {
        /// conjunction operation
        /// P /\ Q is true only when both the value of "P" and "Q"
        /// is true otherwise for any combination it is false

        /// T /\ T == T
        /// P = T, Q = T
        /// P /\ Q == T
        statement P = true;
        statement Q = true;
        proof (P /\ Q) == true;

        /// T /\ F == F
        /// P = T, Q = F
        /// P /\ Q == F
        statement P = true;
        statement Q = false;
        proof (P /\ Q) == false;

        /// F /\ T == F
        /// P = F, Q = T
        /// P /\ Q == F
        statement P = false;
        statement Q = true;
        proof (P /\ Q) == false;

        /// F /\ F == F
        /// P = F, Q = F
        /// P /\ Q == F
        statement P = false;
        statement Q = false;
        proof (P /\ Q) == false;
    }

    /// disjunction binary operator
    theorem disjunction {
        /// disjunction binary boolean operation
        /// written mathematically as " ∨ " and \/ in logican
        /// P ∨ Q is only false if both P and Q are false
        
        /// T \/ T == T
        /// P = T, Q = T
        /// P \/ Q == T
        statement P = true;
        statement Q = true;
        proof (P \/ Q) == true;

        /// T \/ F == T
        /// P = T, Q = F
        /// P \/ Q == T
        statement P = true;
        statement Q = false;
        proof (P \/ Q) == true;

        /// F \/ T == T
        /// P = F, Q = T
        /// P \/ Q == T
        statement P = false;
        statement Q = true;
        proof (P \/ Q) == true;

        /// F \/ F == F
        /// P = F, Q = F
        /// P \/ Q == F
        statement P = false;
        statement Q = false;
        proof (P \/ Q) == false;
    }
}
